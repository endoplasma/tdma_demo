# -*- makefile -*-

.SUFFIXES:

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI)/cpu/stm32f407

### Define the source directories and files
CONTIKI_CPU_DIRS += . \
		 VCP \
		 CMSIS/Include/ \
		 CMSIS/Device/ST/STM32F4xx/Include \
		 STM32_USB_Device_Library/Class/cdc/inc \
		 STM32_USB_Device_Library/Class/cdc/src \
		 STM32_USB_Device_Library/Core/inc \
		 STM32_USB_Device_Library/Core/src \
		 STM32_USB_OTG_Driver/inc \
		 STM32_USB_OTG_Driver/src 

### put CPU specific defines that shall be used as compilerflags here
CPU_DEFINES= \
	__STM32F407__ \

MY_DEFINES = $(CPU_DEFINES) $(PLATFORM_DEFINES) $(PROJECT_DEFINES)

### Direcotry of the used radio chip
RADIO_CHIP_DIR = $(CONTIKI)/cpu/avr/radio/rf230bb
CONTIKI_CPU_DIRS += $(RADIO_CHIP_DIR)

## C Code Files
STM32F_C = clock.c nvic.c random.c system_stm32f4xx.c unique_id.c	\
	   watchdog.c rtimer-arch.c newlib_stubs.c


### Include files in dependence of some Defines
ifneq ($(findstring USE_USART3, $(MY_DEFINES)),)
STM32F_C += usart3.c 
endif

ifneq ($(findstring USE_UART4, $(MY_DEFINES)),)
STM32F_C += uart4.c 
endif

ifneq ($(findstring USE_USB, $(MY_DEFINES)),)
STM32F_C += usb_bsp.c usbd_cdc_vcp.c usbd_desc.c usbd_usr.c		\
	   usb_core.c usb_dcd.c usb_dcd_int.c usbd_core.c		\
	   usbd_ioreq.c usbd_req.c usbd_cdc_core.c
endif

ifdef USE_SLIP
STM32F_C += slip_vcp.c slip.c
endif


### Assembler Files
STM32F_S = startup_stm32f4xx.s

# .s and .s79 not specified here because in Makefile.include only .c and .S suffixes are replaced with .o.
CONTIKI_TARGET_SOURCEFILES += $(STM32F_C) 

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)

### Compiler definitions
# GCC
GCC_NAME = /home/psp/sat/bin/arm-none-eabi-
#GCC_NAME = /home/psp/Downloads/gcc-arm-none-eabi-4_7-2012q4/bin/arm-none-eabi-
#GCC_NAME = /home/spliphi/sat2/bin/arm-none-eabi-
#GCC_NAME = arm-none-eabi-
CC	 = $(GCC_NAME)gcc
LD       = $(GCC_NAME)gcc
AS	 = $(GCC_NAME)gcc
NM	 = $(GCC_NAME)nm
AR       = $(GCC_NAME)ar
OBJCOPY  = $(GCC_NAME)objcopy
STRIP    = $(GCC_NAME)strip
SIZE     = $(GCC_NAME)size

ifndef DEBUG
#OPTI = -Os -ffunction-sections 
#elseif
#generate debug informations
#OPTI = -g
endif #DEBUG

CFLAGSNO = -mthumb \
	   -mcpu=cortex-m4 \
	   -g \
	   -D__MICROLIB \

CFLAGS  += $(CFLAGSNO) $(OPTI) $(addprefix -D, $(MY_DEFINES))

ASFLAGS = -mthumb \
	  -mcpu=cortex-m4 \
	  -c \
	  -g \
	  -Wall \
	  -Os \
	  -ffunction-sections	\
	  -mlittle-endian \
	  -fshort-enums \
	  -x assembler-with-cpp \
	  -Wa,-EL \

LDFLAGS += -mcpu=cortex-m4 \
	   -mthumb  \
	   -Wl,-T$(CONTIKI_CPU)/stm32_flash.ld \
	   -u Default_Handler \
	   -nostartfiles \
	   -fno-exceptions \
	   -ffunction-sections \
	   -fdata-sections \
           -Wl,--gc-sections \

SIZEFLAGS = -A
OBJOPTS = -O binary

### Custom rules

OBJECTDIR = obj_$(TARGET)

### add .s and .s79 files to the object list
ssubst = ${patsubst %.s,%.o,${patsubst %.s79,%.o,$(1)}}
CONTIKI_OBJECTFILES += ${addprefix $(OBJECTDIR)/,${call ssubst, $(STM32F_S)}}


### expand the virtual path for .s files
vpath %.s $(CONTIKI_CPU)/

CUSTOM_RULE_LINK = 1
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a 
	@echo Linking $@
	@$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} -lc -Wl,-\( ${filter %.a,$^} $(TARGET_LIBFILES) -Wl,-\) -lc -o $@.elf

%.map: %.$(TARGET)
	@echo Creating $@.$(TARGET).map ..
	@%.$(TARGET) echo >> contiki-$(TARGET).map
	@$(SIZE) $(SIZEFLAGS) $@.elf >> contiki-$(TARGET).map

%.bin: %.map
	@echo Creating binary $@.bin ...
	@$(OBJCOPY) $(OBJOPTS) $@.elf $@.bin 	

$(OBJECTDIR)/%.o: %.s
	@echo Assembling $< ...
	@$(AS) $(ASFLAGS) -o $@ $<

CUSTOM_RULE_C_TO_OBJECTDIR_O=1
$(OBJECTDIR)/%.o: %.c
	@echo Compiling Object $@ ...
	@$(CC) $(CFLAGS) -MMD -c $< -o $@
	@$(FINALIZE_DEPENDENCY)

CUSTOM_RULE_ALLOBJS_TO_TARGETLIB=1
contiki-$(TARGET).a: $(CONTIKI_OBJECTFILES)
	@echo Combining Objects to $@ library ...
	@$(AR) $(AROPTS) $@ $^

CUSTOM_RULE_C_TO_CO=1
%.co: %.c
	@echo Compiling $@ ...
	$(CC) $(CFLAGS) -c $< -o $@

defines:
	@echo Compiler Defines are:
	@echo $(DEFINES)
#	@echo $(CFLAGS)