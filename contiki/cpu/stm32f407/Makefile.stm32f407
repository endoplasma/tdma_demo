# -*- makefile -*-

.SUFFIXES:

ifdef IAR
${info Using IAR...}
#IAR_PATH =  C:/Program\ Files/IAR\ Systems/Embedded\ Workbench\ 5.4\ Evaluation
ifeq ($(IAR_PATH),)
  ${error IAR_PATH not defined! You must specify IAR root directory}
endif
endif

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI)/cpu/stm32f407

### Define the source directories and files
CONTIKI_CPU_DIRS = . \
		 VCP \
		 CMSIS/Include/ \
		 CMSIS/Device/ST/STM32F4xx/Include \
		 STM32_USB_Device_Library/Class/cdc/inc \
		 STM32_USB_Device_Library/Class/cdc/src \
		 STM32_USB_Device_Library/Core/inc \
		 STM32_USB_Device_Library/Core/src \
		 STM32_USB_OTG_Driver/inc \
		 STM32_USB_OTG_Driver/src 

RADIO_CHIP_DIR = $(CONTIKI)/cpu/avr/radio/rf230bb

CONTIKI_CPU_DIRS += $(RADIO_CHIP_DIR)

## C Code Files
STM32F_C = clock.c nvic.c random.c system_stm32f4xx.c unique_id.c	\
	          usart3.c usart3-putchar.c watchdog.c rtimer-arch.c	\
	          uart4.c uart4-putchar.c usb_bsp.c usbd_cdc_vcp.c	\
	          usbd_desc.c usbd_usr.c usb_core.c usb_dcd.c		\
	          usbd_core.c usbd_ioreq.c usbd_req.c usbd_cdc_core.c	\
	          vcp_putchar.c


## Assembler Files
STM32F_S = startup_stm32f4xx.s

# .s and .s79 not specified here because in Makefile.include only .c and .S suffixes are replaced with .o.
CONTIKI_TARGET_SOURCEFILES += $(STM32F_C) 

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)

### Compiler definitions
ifdef IAR
CC       = iccarm
LD       = ilinkarm
AS       = iasmarm
AR       = iarchive
OBJCOPY  = ielftool
STRIP    = strip
ifndef DEBUG
OPTI = -Ohz --no_unroll
endif #DEBUG
CFLAGSNO = --endian=little --cpu=Cortex-M3 -e --diag_suppress Pa050 -D BOARD_HEADER=\"board.h\" \
			-D BOARD_MB851 -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/iar.h\""  -D CORTEXM3 \
			-D CORTEXM3_STM32W108 -D PHY_STM32W108XX -D DISABLE_WATCHDOG -D ENABLE_ADC_EXTENDED_RANGE_BROKEN \
			-D __SOURCEFILE__=\"$*.c\" -lC $(OBJECTDIR) \
			-I $(IAR_PATH)/arm/inc --dlib_config=DLib_Config_Normal.h

CFLAGS  += $(CFLAGSNO) $(OPTI)
AROPTS  = --create
ASFLAGS = -s+ -w+ --cpu Cortex-M3 -L$(OBJECTDIR)
LDFLAGS += --redirect _Printf=_PrintfSmall --redirect _Scanf=_ScanfSmall --map=contiki-$(TARGET).map
 ifndef COFFEE
  LDFLAGS+= --config $(CONTIKI_CPU)/iar-cfg.icf
 endif #COFFEE
OBJOPTS = --bin

else # no IAR
# GCC
GCC_NAME = arm-none-eabi-
CC	 = $(GCC_NAME)gcc
LD       = $(GCC_NAME)gcc
AS	 = $(GCC_NAME)gcc
NM	 = $(GCC_NAME)nm
AR       = $(GCC_NAME)ar
OBJCOPY  = $(GCC_NAME)objcopy
STRIP    = $(GCC_NAME)strip
SIZE     = $(GCC_NAME)size
ifndef DEBUG
OPTI = -Os -ffunction-sections 
endif #DEBUG

CFLAGSNO = -mcpu=cortex-m4 \
	   -D __MICROLIB \
	   -D __STM32F407__ \
	   -D RF231_HAS_PA="1" \
	   -D HSE_VALUE="8000000" \
	   -D DISCOVERY="1" \
	   -D UIP_CONF_IPV6="1" \
	   -D UIP_CONF_IPV6_RPL="1" \
	   -D AUTOSTART_ENABLE



# KEIL Flags
#-I..\..\cpu\stm32f407 
#-I..\..\platform\stm32f4-discovery		\
#-I..\..\cpu\avr\radio\rf230bb 
#-I..\..\core 
#-I..\..\core\dev		\
#-I..\..\core\lib 
#-I..\..\core\net 
#-I..\..\core\net\mac			\
#-I..\..\core\net\rime 
#-I..\..\core\net\rpl 
#-I..\..\core\sys		\
#-I..\..\core\cfs 
#-I..\..\core\ctk 
#-I..\..\core\loader			\
#-I..\..\cpu\stm32f407\VCP						\
#-I..\..\cpu\stm32f407\STM32_USB_Device_Library\Class\cdc\inc		\
#-I..\..\cpu\stm32f407\STM32_USB_Device_Library\Core\inc			\
#-I..\..\cpu\stm32f407\STM32_USB_OTG_Driver\inc 
#-I C:\Keil\ARM\RV31\Inc 
#-I C:\Keil\ARM\CMSIS\Include 
#-I C:\Keil\ARM\Inc\ST\STM32F4xx 
#-o ".\Flash\*.o"		\
#--omf_browse ".\Flash\*.crf" --depend ".\Flash\*.d"

# STMW108 Flags
# -mthumb -mcpu=cortex-m4 -D "PLATFORM_HEADER=\"hal/micro/cortexm3/compiler/gnu.h\"" \
#	-D BOARD_HEADER=\"board.h\" -g -Wall -Wno-strict-aliasing -mlittle-endian \
#	-D BOARD_MB851   -D CORTEXM3 -D CORTEXM3_STM32W108 -D PHY_STM32W108XX \
#	-D DISABLE_WATCHDOG -D ENABLE_ADC_EXTENDED_RANGE_BROKEN \
#	-D __SOURCEFILE__=\"$*.c\"

CFLAGS  += $(CFLAGSNO) $(OPTI)

ASFLAGS = -mthumb -mcpu=cortex-m3 -c -g -Wall -Os -ffunction-sections \
	    -mlittle-endian -fshort-enums -x assembler-with-cpp -Wa,-EL

# KEIL linker Flags
#--cpu Cortex-M4 *.o 
#--library_type=microlib 
#--strict 
#--scatter ".\Flash\contiki.sct" 
#--summary_stderr 
#--info summarysizes 
#--map 
#--xref 
#--callgraph 
#--symbols 
#--info sizes --info totals --info unused --info veneers 
#Â --list ".\Flash\contiki.map" 
#-o ".\Flash\contiki.axf"

LDFLAGS += -mcpu=cortex-m4 \
	    -mthumb  \
	    -Wl,-T -Xlinker $(CONTIKI_CPU)/gnu.ld \
	    -Wl,-static \
	    -u Default_Handler \
	    -nostartfiles \
	    -Wl,-Map -Xlinker contiki-$(TARGET).map

ifndef ELF_LOADER
 # Do not use garbage collection when the elfloader is used.
 LDFLAGS += -Wl,--gc-sections
endif  #ELF_LOADER

SIZEFLAGS = -A
OBJOPTS = -O binary

endif #GCC Section

ifdef COFFEE_ADDRESS
 COFFEE = 1
endif

# Default values for coffee section start.
ifndef COFFEE_ADDRESS
 COFFEE_ADDRESS = 0x8010c00
endif

ifeq ($(COFFEE),1)
 CONTIKI_TARGET_SOURCEFILES += cfs-coffee.c cfs-coffee-arch.c
 CFLAGS += -DCOFFEE_ADDRESS=$(COFFEE_ADDRESS)

 #If $make invokation passed starting address use phony target to force synchronization of source to .coffeefiles section
 #Warning: recompilation will not be forced if the starting address is then dropped, with dire consequences:
 # -->Source that uses COFFEE_FILES and read macros for conditional compilation will be left hanging!
 # -->Object modules that used .coffeefiles will overlap the .data section.
 # -->$make clean is safest.
#ifeq ($(origin COFFEE_ADDRESS), command line)
# ifeq ($(COFFEE_FILES), 2)      #safest to force recompilation even if eeprom address is changed, might have been switched from flash
   .PHONY : coffee
   coffee:
   $(OBJECTDIR)/cfs-coffee-arch.o    : coffee      #cfs-coffee-arch uses COFFEE_FILES, COFFEE_ADDRESS
   $(OBJECTDIR)/cfs-coffee.o         : coffee      #core routine requires recompilation

else
 # Coffee starts at the end of the flash, before NVM section.
 COFFEE_ADDRESS = 0x801F800
endif


ifndef IAR

LDFLAGS+= -Wl,--section-start=.coffee=$(COFFEE_ADDRESS)

else #IAR

 ifeq ($(COFFEE),1)
  LDFLAGS+= --config $(CONTIKI_CPU)/iar-cfg-coffee.icf
 endif

endif



FLASHER = sudo $(CONTIKI)/tools/stm32w/stm32w_flasher/stm32w_flasher

# Check if we are running under Windows
ifeq ($(HOST_OS),Windows)
  FLASHER = $(CONTIKI)/tools/stm32w/stm32w_flasher/stm32w_flasher.exe
endif


ifndef PORT
# Flash with jlink
FLASHEROPTS = -f -r
else
# Flash on serial port with on-board bootloader
FLASHEROPTS = -f -i rs232 -p $(PORT) -r
 ifdef BTM
#if already in bootloader mode
  FLASHEROPTS += -b
 endif 
endif

### Custom rules

OBJECTDIR = obj_$(TARGET)

ssubst = ${patsubst %.s,%.o,${patsubst %.s79,%.o,$(1)}}

CONTIKI_OBJECTFILES += ${addprefix $(OBJECTDIR)/,${call ssubst, $(STM32W_S)}}

vpath %.s79 $(CONTIKI_CPU)/hal/micro/cortexm3
vpath %.s $(CONTIKI_CPU)/hal/micro/cortexm3


ifdef IAR
# Check if we are in cygwin environment, so we must have paths like /cygdrive/c/... (checking TERM doesn't always work.)
ifneq (,$(findstring cygdrive,$(shell pwd)))
 ${info Cygwin detected.}
 SEDCOMMAND = sed -e '1s,\($(OBJECTDIR)\\$*\)\.o: \(.\):,\1.o : /cygdrive/\l\2,g' -e '1!s,\($(OBJECTDIR)\\$*\)\.o: \(.\):, /cygdrive/\l\2,g' -e 's,\\\([^ ]\),/\1,g' -e 's,$$, \\,' -e '$$s, \\$$,,' < $(@:.o=.P) > $(@:.o=.d)
else
 SEDCOMMAND = sed -e '1s,\($(OBJECTDIR)\\$*\)\.o:,\1.o : ,g' -e '1!s,\($(OBJECTDIR)\\$*\)\.o:, ,g' -e 's,\\\([^ ]\),/\1,g' -e 's,$$, \\,' -e '$$s, \\$$,,' < $(@:.o=.P) > $(@:.o=.d)
endif


CUSTOM_RULE_C_TO_OBJECTDIR_O = 1
$(OBJECTDIR)/%.o: %.c
	$(CC) $(CFLAGS) $< --dependencies=m $(@:.o=.P) -o $@
	@$(SEDCOMMAND); rm -f $(@:.o=.P)
	@$(FINALIZE_DEPENDENCY)

CUSTOM_RULE_C_TO_CO = 1
%.co: %.c
	$(CC) $(CFLAGS) -DAUTOSTART_ENABLE $< -o $@
else #IAR

CUSTOM_RULE_C_TO_CE = 1
%.ce: %.c
	$(CC) $(CFLAGS) -fno-merge-constants -fno-function-sections -DAUTOSTART_ENABLE -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

CUSTOM_RULE_LINK = 1

ifdef CORE
ifeq ($(wildcard $(CORE)),)
 ${error $(CORE) doesn't exist}
endif
.PHONY: symbols.c symbols.h
symbols.c:
	$(NM) $(CORE) | awk -f $(CONTIKI)/tools/mknmlist > symbols.c	
else
symbols.c symbols.h:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h
endif

%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a $(OBJECTDIR)/symbols.o
	$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} -Wl,-\( ${filter %.a,$^} $(TARGET_LIBFILES) -Wl,-\) -o $@
	@echo >> contiki-$(TARGET).map
	@$(SIZE) $(SIZEFLAGS) $@ >> contiki-$(TARGET).map

#%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) $(CONTIKI_OBJECTFILES)
#	$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} ${filter %.a,$^} $(TARGET_LIBFILES) -o $@
#	@echo "\n" >> contiki-$(TARGET).map
#	@$(SIZE) $(SIZEFLAGS) $@ >> contiki-$(TARGET).map


endif #IAR

MOTELIST = $(CONTIKI)/tools/stm32w/motelist-linux

MOTES = $(shell $(MOTELIST) 2>&- | grep USB | \
     cut -f 4 -d \  | \
     perl -ne 'print $$1 . " " if(m-(/dev/\w+)-);')

motelist: stm-motelist

stm-motelist:
	$(MOTELIST)
stm-motes:
	@echo $(MOTES)

$(OBJECTDIR)/%.o: %.s79
	$(AS) $(ASFLAGS) -o $@ $<

$(OBJECTDIR)/%.o: %.s
	$(AS) $(ASFLAGS) -o $@ $<	

%.bin: %.$(TARGET)
	$(OBJCOPY) $(OBJOPTS) $< $@ 

# reset all stm32w devices sequentially, as stm32w_flasher cannot access different ports in parallel
stm-reset:
	$(foreach PORT, $(MOTES), $(FLASHER) -r -p $(PORT);$(\n))
	@echo Done

ifdef MOTE
%.upload: %.bin
	$(FLASHER) $(FLASHEROPTS) $< -p $(word $(MOTE), $(MOTES))
else # MOTE
%.upload: %.bin
	$(foreach PORT, $(MOTES), $(FLASHER) $(FLASHEROPTS) $< -p $(PORT);$(\n))
endif # MOTE

ifdef MOTE
login:
	$(SERIALDUMP) -b115200 -d10000 $(USBDEVPREFIX)$(word $(MOTE), $(MOTES))
else
login:
	$(SERIALDUMP) -b115200 -d10000 $(USBDEVPREFIX)$(firstword $(MOTES))
endif

# a target that gives a user-friendly memory profile, taking into account the RAM
# that is statically occupied by the stack as defined in cpu/stm32w108/gnu.ld
RAM_SIZE = 8192
FLASH_SIZE = 128*1024
STACK_SIZE = 1280
%.size: %.$(TARGET)
	@size -A $< | egrep "data|bss" | awk '{s+=$$2} END {s=s+$(STACK_SIZE); f=$(RAM_SIZE)-s; printf "[RAM]   used %6d, free %6d\n",s,f;}'
	@size -A $< | egrep "text|isr_vector" | awk '{s+=$$2} END {f=$(FLASH_SIZE)-s; printf "[Flash] used %6d, free %6d\n",s,f;}'
