# -*- makefile -*-

.SUFFIXES:

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI)/cpu/stm32f407

### Define the source directories and files
CONTIKI_CPU_DIRS = . \
		 VCP \
		 CMSIS/Include/ \
		 CMSIS/Device/ST/STM32F4xx/Include \
		 STM32_USB_Device_Library/Class/cdc/inc \
		 STM32_USB_Device_Library/Class/cdc/src \
		 STM32_USB_Device_Library/Core/inc \
		 STM32_USB_Device_Library/Core/src \
		 STM32_USB_OTG_Driver/inc \
		 STM32_USB_OTG_Driver/src 

RADIO_CHIP_DIR = $(CONTIKI)/cpu/avr/radio/rf230bb

CONTIKI_CPU_DIRS += $(RADIO_CHIP_DIR)

## C Code Files
STM32F_C = clock.c nvic.c random.c system_stm32f4xx.c unique_id.c	\
	   watchdog.c rtimer-arch.c usb_bsp.c usbd_cdc_vcp.c		\
	   usbd_desc.c usbd_usr.c usb_core.c usb_dcd.c usb_dcd_int.c	\
	   usbd_core.c usbd_ioreq.c usbd_req.c usbd_cdc_core.c		\
	   vcp_putchar.c newlib_stubs.c

ifdef USE_USART3
STM32F_C += usart3.c usart3-putchar.c
endif

ifdef USE_UART4
STM32F_C += uart4.c uart4-putchar.c
endif

ifdef USE_SLIP
STM32F_C += slip_vcp.c slip.c
endif


## Assembler Files
STM32F_S = startup_stm32f4xx.s

# .s and .s79 not specified here because in Makefile.include only .c and .S suffixes are replaced with .o.
CONTIKI_TARGET_SOURCEFILES += $(STM32F_C) 

CONTIKI_SOURCEFILES        += $(CONTIKI_TARGET_SOURCEFILES)

### Compiler definitions
# GCC
GCC_NAME = /home/psp/sat/bin/arm-none-eabi-
#GCC_NAME = /home/psp/Downloads/gcc-arm-none-eabi-4_7-2012q4/bin/arm-none-eabi-
#GCC_NAME = /home/spliphi/sat2/bin/arm-none-eabi-
#GCC_NAME = arm-none-eabi-
CC	 = $(GCC_NAME)gcc
LD       = $(GCC_NAME)gcc
AS	 = $(GCC_NAME)gcc
NM	 = $(GCC_NAME)nm
AR       = $(GCC_NAME)ar
OBJCOPY  = $(GCC_NAME)objcopy
STRIP    = $(GCC_NAME)strip
SIZE     = $(GCC_NAME)size
ifndef DEBUG
#OPTI = -Os -ffunction-sections 
#elseif
#generate debug informations
#OPTI = -g
endif #DEBUG

CFLAGSNO = -mthumb \
	   -mcpu=cortex-m4 \
	   -g \
	   -D __MICROLIB \
	   -D __STM32F407__ \
	   -D RF231_HAS_PA="1" \
	   -D HSE_VALUE="8000000" \
	   -D DISCOVERY="1" \
	   -D AUTOSTART_ENABLE \

CFLAGS  += $(CFLAGSNO) $(OPTI)

ASFLAGS = -mthumb -mcpu=cortex-m3 -c -g -Wall -Os -ffunction-sections \
	  -mlittle-endian -fshort-enums -x assembler-with-cpp \
	  -Wa,-EL -lnosys

LDFLAGS += -mcpu=cortex-m4 \
	   -mthumb  \
	   -Wl,-T$(CONTIKI_CPU)/stm32_flash.ld \
	   -u Default_Handler \
	   -nostartfiles \
	   -fno-exceptions -ffunction-sections -fdata-sections \
           -Wl,--gc-sections \

ifndef ELF_LOADER
 # Do not use garbage collection when the elfloader is used.
# LDFLAGS += -Wl,--gc-sections
endif  #ELF_LOADER

SIZEFLAGS = -A
OBJOPTS = -O binary

### Custom rules

OBJECTDIR = obj_$(TARGET)

ssubst = ${patsubst %.s,%.o,${patsubst %.s79,%.o,$(1)}}

CONTIKI_OBJECTFILES += ${addprefix $(OBJECTDIR)/,${call ssubst, $(STM32F_S)}}

vpath %.s $(CONTIKI_CPU)/

CUSTOM_RULE_LINK = 1
#
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) $(PROJECT_LIBRARIES) contiki-$(TARGET).a 
	$(LD) $(LDFLAGS) $(TARGET_STARTFILES) ${filter-out %.a,$^} -lc -Wl,-\( ${filter %.a,$^} $(TARGET_LIBFILES) -Wl,-\) -lc -o $@.elf
	echo >> contiki-$(TARGET).map
	$(SIZE) $(SIZEFLAGS) $@.elf >> contiki-$(TARGET).map
	$(OBJCOPY) $(OBJOPTS) $@.elf $@.bin 

#$(OBJECTDIR)/%.o: %.s79
#	$(AS) $(ASFLAGS) -o $@ $<

$(OBJECTDIR)/%.o: %.s
	$(AS) $(ASFLAGS) -o $@ $<	

